// Generated by CoffeeScript 1.8.0
(function() {
  var Logic, assert, create, _, _collection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("coffee-script");
  var assert = require('assert');
  var _ = require("lodash");
  var Logic = require("../query");

  _.mixin(Logic);

  _collection = [
    {
      title: "Home",
      colors: ["red", "yellow", "blue"],
      likes: 12,
      featured: true,
      content: "Dummy content about coffeescript"
    }, {
      title: "About",
      colors: ["red"],
      likes: 2,
      featured: true,
      content: "dummy content about javascript"
    }, {
      title: "Contact",
      colors: ["red", "blue"],
      likes: 20,
      content: "Dummy content about PHP"
    }
  ];

  create = function() {
    return _.clone(_collection);
  };

  describe("Underscore Query Tests", function() {
   
    it("Equals query", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: "Home"
      });
      assert.equal(result.length, 1);
      assert.equal(result[0].title, "Home");
      result = _.query(a, {
        colors: "blue"
      });
      assert.equal(result.length, 2);
      result = _.query(a, {
        colors: {
          $deepEquals: ["red", "blue"]
        }
      });
      return assert.equal(result.length, 1);
    });
    it("Simple equals query (no results)", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: "Homes"
      });
      return assert.equal(result.length, 0);
    });
    it("Simple equals query (boolean)", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        featured: true
      });
      return assert.equal(result.length, 2);
    });
    it("Simple equals query with explicit $equal", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $equal: "About"
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$contains operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        colors: {
          $contains: "blue"
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$ne operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $ne: "Home"
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$lt operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {  likes: {   $lt: 12  } });
      assert.equal(result.length, 1);

      result = _.query(a, {  likes: {   $lt: '12'  } });
      assert.equal(result.length, 1);

      return assert.equal(result[0].title, "About");
    });
    it("$lte operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $lte: 12
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$gt operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $gt: 12
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Contact");
    });
    it("$gte operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $gte: 12
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$between operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $between: [1, 5]
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$mod operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $mod: [3, 0]
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$in operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $in: ["Home", "About"]
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$in operator array shortcut", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: ["Home", "About"]

      });
      return assert.equal(result.length, 2);
    });
    it("$in operator with wrong query value", function() {
      var a;
      a = create();
      return assert.throws(function() {
        return _.query(a, {
          title: {
            $in: "Home"
          }
        });
      });
    });
    it("$nin operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $nin: ["Home", "About"]
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Contact");
    });
    it("$all operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        colors: {
          $all: ["red", "blue"]
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$all operator (wrong values)", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $all: ["red", "blue"]
        }
      });
      assert.equal(result.length, 0);
      return assert.throws(function() {
        return _.query(a, {
          colors: {
            $all: "red"
          }
        });
      });
    });
    it("$any operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        colors: {
          $any: ["red", "blue"]
        }
      });
      assert.equal(result.length, 3);
      result = _.query(a, {
        colors: {
          $any: ["yellow", "blue"]
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$size operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        colors: {
          $size: 3
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$exists operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        featured: {
          $exists: true
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$has operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        featured: {
          $exists: false
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Contact");
    });
    it("$like operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $like: "javascript"
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$like operator 2", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $like: "content"
        }
      });
      return assert.equal(result.length, 3);
    });
    it("$likeI operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $likeI: "dummy"
        }
      });
      assert.equal(result.length, 3);
      result = _.query(a, {
        content: {
          $like: "dummy"
        }
      });
      return assert.equal(result.length, 1);
    });
    it("$startsWith operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $startsWith: "Ho"
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$endsWith operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: {
          $endsWith: "me"
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$regex", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $regex: 'javascript',$options: 'gi'
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$regex", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $regex: /javascript/gi
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$regex2", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $regex: /dummy/
        }
      });
      return assert.equal(result.length, 1);
    });
    it("$regex3", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: {
          $regex: /dummy/i
        }
      });
      return assert.equal(result.length, 3);
    });
    it("$regex4", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        content: /javascript/i
      });
      return assert.equal(result.length, 1);
    });
    it("$regex with multiple response values", function () {
      var a, result;
      a = create();
      result = _.query(a, {
        colors: /red/i
      });
      return assert.equal(result.length, 3);
    });



    it("$cb - callback", function() {
      var a, fn, result;
      a = create();
      fn = function(attr) {
        return attr.charAt(0).toLowerCase() === "c";
      };
      result = _.query(a, {
        title: {
          $cb: fn
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Contact");
    });
    it("$and operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $gt: 5
        },
        colors: {
          $contains: "yellow"
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$and operator (object)", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $and: [
          {
            likes: {
              $gt: 5
            }
          }, {
            colors: {
              $contains: "yellow"
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$and operator (explicit)", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $and: [
          {
            likes: {
              $gt: 5
            }
          }, {
            colors: {
              $contains: "yellow"
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });

    it ("Nested left $and", function() {
      var q = {"$and":[{"bo_admitflag":"1"},{"$and":[{"bo_emfasys":"1"},{"bo_transferstudent":"0"}]}]};
      var o = { bo_admitflag: 1, bo_emfasys: 1, bo_transferstudent: 0}
      assert(Logic.lhs._rowsatisfies(o,q))

    });

    //
    it ("Linear left $and", function() {
      var q = {"$and":[{"b":{"$gt":"12"}},{"a":{"$lt":"20"}}]}

      assert(Logic.lhs._rowsatisfies( { a: 3, b: 13} ,q))
      assert(Logic.lhs._rowsatisfies( { a: 3 , b: '13'} ,q))

//      assert(Logic.lhs._rowsatisfies( {"i":"2","j":"w","a":"3","b":"13","c":""} ,q))

    });

    it("$or operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $or: [
          {
            likes: {
              $gt: 5
            }
          }, {
            colors: {
              $contains: "yellow"
            }
          }
        ]
      });
      return assert.equal(result.length, 2);
    });
    it("$or2 operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $or: [
          {
            likes: {
              $gt: 5
            }
          }, {
            featured: true
          }
        ]
      });
      return assert.equal(result.length, 3);
    });
    it("$nor operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $nor: [
          {
            likes: {
              $gt: 5
            }
          }, {
            colors: {
              $contains: "yellow"
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("Compound Queries", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $and: {
          likes: {
            $gt: 5
          }
        },
        $or: {
          content: {
            $like: "PHP"
          },
          colors: {
            $contains: "yellow"
          }
        }
      });
      assert.equal(result.length, 2);
      result = _.query(a, {
        $and: {
          likes: {
            $lt: 15
          }
        },
        $or: {
          content: {
            $like: "Dummy"
          },
          featured: {
            $exists: true
          }
        },
        $not: {
          colors: {
            $contains: "yellow"
          }
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "About");
    });
    it("$not operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $not: {
          likes: {
            $lt: 12
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: {
            $lt: 12
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: 12
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not $equal operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: {
            $equal: 12
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not $equal operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: {
            $ne: 12
          }
        }
      });
      return assert.equal(result.length, 1);
    });
    it("$elemMatch", function() {
      var a, b, result, text_search;
      a = [
        {
          title: "Home",
          comments: [
            {
              text: "I like this post"
            }, {
              text: "I love this post"
            }, {
              text: "I hate this post"
            }
          ]
        }, {
          title: "About",
          comments: [
            {
              text: "I like this page"
            }, {
              text: "I love this page"
            }, {
              text: "I really like this page"
            }
          ]
        }
      ];
      b = [
        {
          foo: [
            {
              shape: "square",
              color: "purple",
              thick: false
            }, {
              shape: "circle",
              color: "red",
              thick: true
            }
          ]
        }, {
          foo: [
            {
              shape: "square",
              color: "red",
              thick: true
            }, {
              shape: "circle",
              color: "purple",
              thick: false
            }
          ]
        }
      ];
      text_search = {
        $likeI: "love"
      };
      result = _.query(a, {
        $or: {
          comments: {
            $elemMatch: {
              text: text_search
            }
          },
          title: text_search
        }
      });
      assert.equal(result.length, 2);
      result = _.query(a, {
        $or: {
          comments: {
            $elemMatch: {
              text: /post/
            }
          }
        }
      });
      assert.equal(result.length, 1);
      result = _.query(a, {
        $or: {
          comments: {
            $elemMatch: {
              text: /post/
            }
          },
          title: /about/i
        }
      });
      assert.equal(result.length, 2);
      result = _.query(a, {
        $or: {
          comments: {
            $elemMatch: {
              text: /really/
            }
          }
        }
      });
      assert.equal(result.length, 1);
      result = _.query(b, {
        foo: {
          $elemMatch: {
            shape: "square",
            color: "purple"
          }
        }
      });
      assert.equal(result.length, 1);
      assert.equal(result[0].foo[0].shape, "square");
      assert.equal(result[0].foo[0].color, "purple");
      return assert.equal(result[0].foo[0].thick, false);
    });
    it("$any and $all", function() {
      var a, b, c, d, e, result;
      a = {
        name: "test",
        tags1: ["red", "yellow"],
        tags2: ["orange", "green", "red", "blue"]
      };
      b = {
        name: "test1",
        tags1: ["purple", "blue"],
        tags2: ["orange", "red", "blue"]
      };
      c = {
        name: "test2",
        tags1: ["black", "yellow"],
        tags2: ["green", "orange", "blue"]
      };
      d = {
        name: "test3",
        tags1: ["red", "yellow", "blue"],
        tags2: ["green"]
      };
      e = [a, b, c, d];
      result = _.query(e, {
        tags1: {
          $any: ["red", "purple"]
        },
        tags2: {
          $all: ["orange", "green"]
        }
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].name, "test");
    });
    it("$elemMatch - compound queries", function() {
      var a, result;
      a = [
        {
          title: "Home",
          comments: [
            {
              text: "I like this post"
            }, {
              text: "I love this post"
            }, {
              text: "I hate this post"
            }
          ]
        }, {
          title: "About",
          comments: [
            {
              text: "I like this page"
            }, {
              text: "I love this page"
            }, {
              text: "I really like this page"
            }
          ]
        }
      ];
      result = _.query(a, {
        comments: {
          $elemMatch: {
            $not: {
              text: /page/
            }
          }
        }
      });
      return assert.equal(result.length, 1);
    });
    it("Explicit $and combined with matching $or must return the correct number of items", function() {
      var Col, result;
      Col = [
        {
          equ: 'ok',
          same: 'ok'
        }, {
          equ: 'ok',
          same: 'ok'
        }
      ];
      result = _.query(Col, {
        $and: {
          equ: 'ok',
          $or: {
            same: 'ok'
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("Implicit $and consisting of non-matching subquery and $or must return empty list", function() {
      var Col, result;
      Col = [
        {
          equ: 'ok',
          same: 'ok'
        }, {
          equ: 'ok',
          same: 'ok'
        }
      ];
      result = _.query(Col, {
        equ: 'bogus',
        $or: {
          same: 'ok'
        }
      });
      return assert.equal(result.length, 0);
    });
    it("Testing nested compound operators", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $and: {
          colors: {
            $contains: "blue"
          },
          $or: {
            featured: true,
            likes: 12
          }
        },
        $or: [
          {
            content: {
              $like: "dummy"
            }
          }, {
            content: {
              $like: "Dummy"
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      result = _.query(a, {
        $and: {
          colors: {
            $contains: "blue"
          },
          $or: {
            featured: true,
            likes: 20
          }
        },
        $or: [
          {
            content: {
              $like: "dummy"
            }
          }, {
            content: {
              $like: "Dummy"
            }
          }
        ]
      });
      return assert.equal(result.length, 2);
    });
    it("works with queries supplied as arrays", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $or: [
          {
            title: "Home"
          }, {
            title: "About"
          }
        ]
      });
      assert.equal(result.length, 2);
      assert.equal(result[0].title, "Home");
      return assert.equal(result[1].title, "About");
    });
    // it("works with underscore chain", function() {
    //   var a, q, result;
    //   a = create();
    //   q = {
    //     $or: [
    //       {
    //         title: "Home"
    //       }, {
    //         title: "About"
    //       }
    //     ]
    //   };
    //   result = _.chain(a).query(q).pluck("title").value();
    //   assert.equal(result.length, 2);
    //   assert.equal(result[0], "Home");
    //   return assert.equal(result[1], "About");
    // });
    it("works with a getter property", function() {
      var Backbone, a, result;
      Backbone = require("backbone");
      a = new Backbone.Collection([
        {
          id: 1,
          title: "test"
        }, {
          id: 2,
          title: "about"
        }
      ]);
      result = _.query(a.models, {
        title: "about"
      }, "get");
      assert.equal(result.length, 1);
      return assert.equal(result[0].get("title"), "about");
    });
    it("works with a getter function", function() {
      var Backbone, a, getter, result;
      Backbone = require("backbone");
      getter = function(obj, key) {
        return obj[key] * 2.5;
      };
      a = create();
      result = _.query(a, {
        likes: 30
      }, getter);
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("can be mixed into backbone collections", function() {
      var Backbone, Collection, a, result, result2;
      Backbone = require("backbone");
      Collection = (function(_super) {
        __extends(Collection, _super);

        function Collection() {
          return Collection.__super__.constructor.apply(this, arguments);
        }

        Collection.prototype.query = function(params) {
          return _.query(this.models, params, "get");
        };

        Collection.prototype.whereBy = function(params) {
          return new this.constructor(this.query(params));
        };

        Collection.prototype.buildQuery = function() {
          return _.query.build(this.models, "get");
        };

        return Collection;

      })(Backbone.Collection);
      a = new Collection([
        {
          id: 1,
          title: "test"
        }, {
          id: 2,
          title: "about"
        }
      ]);
      result = a.query({
        title: "about"
      });
      assert.equal(result.length, 1);
      assert.equal(result[0].get("title"), "about");
      result2 = a.whereBy({
        title: "about"
      });
      assert.equal(result2.length, 1);
      assert.equal(result2.at(0).get("title"), "about");
      return assert.equal(result2.pluck("title")[0], "about");
    });
    it("works with dot notation", function() {
      var collection, result;
      collection = [
        {
          title: "Home",
          stats: {
            likes: 10,
            views: {
              a: {
                b: 500
              }
            }
          }
        }, {
          title: "About",
          stats: {
            likes: 5,
            views: {
              a: {
                b: 234
              }
            }
          }
        }, {
          title: "Code",
          stats: {
            likes: 25,
            views: {
              a: {
                b: 796
              }
            }
          }
        }
      ];
      result = _.query(collection, {
        "stats.likes": 5
      }, Logic.undot);
      assert.equal(result.length, 1);
      assert.equal(result[0].title, "About");
      result = _.query(collection, {
        "stats.views.a.b": 796
      }, Logic.undot);
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Code");
    });
    it("works with dot notation arrays", function() {
      var collection, result;
      collection = [
        {
          id: 1,
          client: [
            {
              name: 'ios',
              accessToken: [
                {token: 'a', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'b', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'c', expires: '2019-11-09T09:03:32.393+00:00'},
              ]
            },
            {
              name: 'android',
              accessToken: [
                {token: 'd', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'e', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'f', expires: '2019-11-09T09:03:32.393+00:00'},
              ]
            },
          ]
        },
        {
          id: 2,
          client: [
            {
              name: 'ios',
              accessToken: [
                {token: 'g', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'h', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'i', expires: '2019-11-09T09:03:32.393+00:00'},
              ]
            },
            {
              name: 'android',
              accessToken: [
                {token: 'a', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'k', expires: '2019-11-09T09:03:32.393+00:00'},
                {token: 'l', expires: '2019-11-09T09:03:32.393+00:00'},
              ]
            },
          ]
        }
      ];
      result = _.query(collection, {
        "client.accessToken.token": 'h'
      }, Logic.undotArray);
      assert.equal(result.length, 1);
      assert.equal(result[0].id, 2);

      result = _.query(collection, {
        "client.accessToken.token": 'a'
      }, Logic.undotArray);
      assert.equal(result.length, 2);
      assert.equal(result[0].id, 1);
      assert.equal(result[1].id, 2);
    });
    it("Handles multiple inequalities", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $gt: 2,
          $lt: 20
        }
      });
      assert.equal(result.length, 1);
      assert.equal(result[0].title, "Home");
      result = _.query(a, {
        likes: {
          $gte: 2,
          $lt: 20
        }
      });
      assert.equal(result.length, 2);
      assert.equal(result[0].title, "Home");
      assert.equal(result[1].title, "About");
      result = _.query(a, {
        likes: {
          $gt: 2,
          $lte: 20
        }
      });
      assert.equal(result.length, 2);
      assert.equal(result[0].title, "Home");
      assert.equal(result[1].title, "Contact");
      result = _.query(a, {
        likes: {
          $gte: 2,
          $lte: 20
        }
      });
      assert.equal(result.length, 3);
      assert.equal(result[0].title, "Home");
      assert.equal(result[1].title, "About");
      assert.equal(result[2].title, "Contact");
      result = _.query(a, {
        likes: {
          $gte: 2,
          $lte: 20,
          $ne: 12
        }
      });
      assert.equal(result.length, 2);
      assert.equal(result[0].title, "About");
      return assert.equal(result[1].title, "Contact");
    });
    it("Handles nested multiple inequalities", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $and: [
          {
            likes: {
              $gt: 2,
              $lt: 20
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      return assert.equal(result[0].title, "Home");
    });
    it("$not operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $not: {
          likes: {
            $lt: 12
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not operator - mongo style", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: {
            $lt: 12
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$not operator - mongo style", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: 12
        }
      });
      return assert.equal(result.length, 2);
    });
    it("combination of $gt and $lt - mongo style", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $gt: 2,
          $lt: 20
        }
      });
      return assert.equal(result.length, 1);
    });
    it("$not combination of $gt and $lt  - mongo style", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: {
            $gt: 2,
            $lt: 20
          }
        }
      });
      return assert.equal(result.length, 2);
    });
    it("$nor combination of $gt and $lt  - expressions ", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $nor: [
          {
            likes: {
              $gt: 2
            }
          }, {
            likes: {
              $lt: 20
            }
          }
        ]
      });
      return assert.equal(result.length, 0);
    });
    it("$nor combination of $gt and $lt  - values", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $nor: [
            {
              $gt: 2
            }, {
              $lt: 20
            }
          ]
        }
      });
      return assert.equal(result.length, 0);
    });
    it("combination of $gt  and $not", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $not: 2,
          $lt: 20
        }
      });
      return assert.equal(result.length, 1);
    });
    it("$type operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        likes: {
          $type: 'number'
        }
      });
      assert.equal(result.length, 3);
      result = _.query(a, {
        likes: {
          $type: 'string'
        }
      });
      assert.equal(result.length, 0);
      result = _.query(a, {
        colors: {
          $type: 'object'
        }
      });
      assert.equal(result.length, 3);
      result = _.query(a, {
        title: {
          $type: 'string'
        }
      });
      return assert.equal(result.length, 3);
    });
    it("returns Query function", function() {
      var a, fn, result;
      a = create();
      fn = Logic.Query({
        likes: 12
      });
      result = a.filter(fn);
      assert.equal(result.length, 1);
      return assert.equal(result[0].likes, 12);
    });
    it("$or operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        $or: [
          {
            likes: {
              $gt: 1,
              $lte: 2
            }
          }, {
            likes: {
              $gt: 11,
              $lte: 12
            }
          }
        ]
      });
      return assert.equal(result.length, 2);
    });
    return it("$or operator", function() {
      var a, result;
      a = create();
      result = _.query(a, {
        title: "About",
        $or: [
          {
            likes: {
              $gt: 1,
              $lte: 2
            }
          }, {
            likes: {
              $gt: 11,
              $lte: 12
            }
          }
        ]
      });
      assert.equal(result.length, 1);
      result = _.query(a, {
        likes: {
          $or: [
            {
              $gt: 1,
              $lte: 2
            }, {
              $gt: 11,
              $lte: 12
            }
          ]
        }
      });
      assert.equal(result.length, 2);
    });
  });

  it("Handles nested multiple inequalities: value and $and", function() {
    var a, query, result;
    a = create();
    result = _.query(a, {
      $and: [
        {
          likes: {
            $gt: 2,
            $lt: 20
          }
        }
      ]
    });
    assert.equal(result.length, 1);
    assert.equal(result[0].title, "Home");
    a = create();
    query = {
      $and: [
        {
          likes: {
            $gt: 2
          }
        }, {
          likes: {
            $lt: 20
          }
        }
      ]
    };
    result = _.query(a, query);
    assert.equal(result.length, 1);
    return assert.equal(result[0].title, "Home");
  });

  it("Handles inverted $and queries", function() {
    var a, query, result;
    a = create();
    query = {
      likes: {
        $and: [
          {
            $gt: 2,
            $lt: 20
          }
        ]
      }
    };
    result = _.query(a, query);
    assert.equal(result.length, 1);
    assert.equal(result[0].title, "Home");
    a = create();
    query = {
      likes: {
        $and: [
          {
            $gt: 2
          }, {
            $lt: 20
          }
        ]
      }
    };
    result = _.query(a, query);
    assert.equal(result.length, 1);
    return assert.equal(result[0].title, "Home");
  });

  it("Handles nested multiple inequalities: two ands", function() {
    var a, result;
    a = create();
    result = _.query(a, {
      $and: [
        {
          likes: {
            $gt: 2
          }
        }, {
          likes: {
            $lt: 20
          }
        }
      ]
    });
    assert.equal(result.length, 1);
    return assert.equal(result[0].title, "Home");
  });

  it("Handles nested multiple inequalities: two ors", function() {
    var a, result;
    a = create();
    result = _.query(a, {
      $or: [
        {
          likes: {
            $lte: 2
          }
        }, {
          likes: {
            $gte: 20
          }
        }
      ]
    });
    assert.equal(result.length, 2);
    assert.equal(result[0].title, "About");
    return assert.equal(result[1].title, "Contact");
  });

  it("Handles $or nested within $and", function() {
    var a, q, result;
    q = {
      $and: [
        {
          $or: [
            {
              likes: 2
            }, {
              likes: 20
            }
          ]
        }, {
          $or: [
            {
              title: "Contact"
            }, {
              title: "About"
            }
          ]
        }
      ]
    };
    a = create();
    result = _.query(a, q);
    return assert.equal(result.length, 2);
  });

  it("Handles $where function", function() {
    var a, result;
    a = create();
    result = _.query(a, {
      $where: function() {
        return this.likes === 12;
      }
    });
    return assert.equal(result.length, 1);
  });

  it("Handles $where string", function() {
    var a, result;
    a = create();
    result = _.query(a, {
      $where: " return this.likes >= 12"
    });
    return assert.equal(result.length, 2);
  });


}).call(this);

//# sourceMappingURL=logic.js.map

var table1 = [
  { id: 4, color: "red"},
  { id: 1, color: "red"},
  { id: 2, color: "green"},
  { id: 5, color: "purple"},
  { id: 3, color: "blue"},
  { id: 6, color: "yellow"}
]

var table2 = [
  { id: 1, metal: "steel"},
  { id: 2, metal: "aluminum"},
  { id: 3, metal: "copper"},
  { id: 4, metal: "silver"},
  { id: 5, metal: "bronze"},
  { id: 7, metal: "titanium"}
]